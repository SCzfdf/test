<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="  
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	

	<!-- 开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类， 
		并在必要时进行安全逻辑验证 -->
	<aop:config proxy-target-class="true"></aop:config>
	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean> -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>


	<!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	<bean name="credentialsMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="MD5"></property>
		<property name="hashIterations" value="2"></property>
	</bean>

	<!-- 缓存管理 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager">
	</bean>

	<!-- 使用Shiro自带的JdbcRealm类 指定密码匹配所需要用到的加密对象 指定存储用户、角色、权限许可的数据源及相关查询语句 -->
	<bean id="jdbcRealm" class="com.wfly.realm.JdbcRealm">
		<!-- 可以指定其他组件 -->
		<property name="credentialsMatcher" ref="credentialsMatcher" /><!--使用的加密器 -->
		<!-- <property name="permissionsLookupEnabled" value="true"></property> -->
	</bean>

	<!-- Shiro安全管理器 (核心控制器) -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcRealm"></property>
		<property name="cacheManager" ref="cacheManager"></property>

		<property name="rememberMeManager.cookie.maxAge" value="10"></property>
	</bean>

	<!-- Shiro主过滤器本身功能十分强大，其强大之处就在于它支持任何基 于URL路径表达式的、自定义的过滤器的执行 Web应用中，Shiro可控制的W 
		eb请求必须经过Shiro主过滤器的拦截，Shiro对基于Spring的Web应用提供了完美的支持 -->
	<!-- shiro主过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口，这个属性是必须的 -->
		<property name="securityManager" ref="securityManager"></property>
		<!-- 要求登录时的链接(登录页面地址)，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<property name="loginUrl" value="/login.html"></property>
		<!-- 登录成功后要跳转的连接(本例中此属性用不到，因为登录成功后的处理逻辑在LoginController里硬编码) -->
		<!-- <property name="successUrl" value="/" ></property> -->
		<!-- 用户访问未对其授权的资源时，所显示的连接 -->
		<!-- <property name="unauthorizedUrl" value="/"></property> -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 对静态资源设置允许匿名访问 -->
				<!-- /image/** = anon /js/** = anon /css/** = anon /*.html = anon 可匿名访问路径，例如：短信验证码、登录连接、退出连接等 
					/test/*= anon /login/*.do = anon 剩余其他路径，必须认证通过才可以访问 /data/** = perms["publish_article"] 
					/** = authc -->
				/login/logout.do = logout
				/** = anon
			</value>
		</property>
	</bean>
</beans>